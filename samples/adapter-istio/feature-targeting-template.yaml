# this config is created through command
# mixgen template --descriptor generated_template.proto_descriptor --name feature-targeting --output ../../samples/adapter-istio/feature-targeting-template.yaml
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: feature-targeting
  namespace: istio-system
spec:
  descriptor: ""
---
